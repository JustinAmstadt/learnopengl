#version 430 core

// Work groups
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Output image

layout(rgba32f, binding = 0) uniform image2D imgOutput;

// #include <include/sphere.glsl>

// Ray structure
struct Ray {
    vec3 origin;
    vec3 direction;
};

// Function to intersect a ray with a sphere
bool intersectSphere(Ray ray, Sphere sphere, out float t) {
    vec3 oc = ray.origin - sphere.center;
    float b = dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float h = b * b - c;

    if (h < 0.0) return false;

    h = sqrt(h);
    t = -b - h;
    return true;
}

// Main function
void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 image_size = imageSize(imgOutput);

    // Normalize pixel coordinates
    vec2 uv = (vec2(pixel_coords) / vec2(image_size)) * 2.0 - 1.0;
    uv.y = -uv.y;  // Flip y-coordinate

    // Camera setup
    vec3 ray_origin = vec3(0.0, 0.0, 0.0);
    vec3 ray_direction = normalize(vec3(uv.x, uv.y, -1.0));

    Ray ray = Ray(ray_origin, ray_direction);

    // Scene setup (simple scene with one sphere)
    Sphere sphere = Sphere(vec3(0.0, 0.0, -3.0), 1.0, vec3(1.0, 0.0, 0.0));  // Red sphere

    float t;
    vec3 pixel_color = vec3(0.0);

    // Check intersection with sphere
    if (intersectSphere(ray, sphere, t)) {
        pixel_color = sphere.color;
    }

    // Write color to output image
    imageStore(imgOutput, pixel_coords, vec4(pixel_color, 1.0));
}